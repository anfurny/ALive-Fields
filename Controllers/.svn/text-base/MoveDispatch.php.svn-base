<?php
/** * MoveDispatch Controller;
 * File: Controllers/MoveDispatch.php;
 * @copyright Copyright (c) 2008-2011, Language People, Inc.; All rights reserved.;
 * @author Alex Rohde;
 * ;
 * Created: April 8 2011; */


// questions to answer -- 
// $keepAssignment,  If interp assigned, do we want to keep the interpreter? //               if ( MsgBox("Keep Assignment for InterpID " . $dispRS->_InterpID, vbQuestion + vbYesNo, "Confirm Assignment") = vbNo ) 
//	  Re invoice for this dispatch 							//	if ( MsgBox("ReInvoice for this dispatch?", vbQuestion + vbYesNo, "Confirm Action") = vbYes )				 
//
//

// Steps involved in process;
// 1. Determine if this client has any other dispatches with this Customer;
//   A. if ( so, Copy the client to the new cust;
//   B. else move the client to new cust;
//;
// 2. ;
require_once("../includes/dispatch_functions.php");
require_once("../includes/alex_functions.php");
require_once("../models/ActionRecord.php");

 function moveDispatch($DispId, $newCustID, $keepAssignment = true, $reinvoice = true)  //getting right to it;
	{  
	$DispId = (int)$DispId; //no harm in another layer of SQL-injection protection
	$newCustID = (int)$newCustID; 
	/*
	$this->matching = 0;  
	$this->result = NULL;
	$this->row = NULL;
	$this->currentID = 0;*/
	 
    //Move a Dispatch from old to new client;
    $dispRS = new ActionRecord("Dispatch", "UPDATE", "DispatchID");
	$dispRS->find($DispId);
   
   $the_facility = $dispRS->_FacilityID;
   $customer_a = database_fetch_field("SELECT CustID from Client WHERE ClientID = " . $dispRS->_ClientID );
   
   $both_dispatches_have_this_facility = database_fetch_field("
   			SELECT facB.FacilityID from Facility facA

			INNER JOIN Facility as facB 
			on facA.Latitude = facB.Latitude AND facB.Longitude = facA.Longitude
			
			WHERE facB.CustID = $newCustID
			AND facA.FacilityID = $the_facility");
			
	if ($both_dispatches_have_this_facility)
		$dispRS->_FacilityID = $both_dispatches_have_this_facility;
	else
		{
		$count_facility_for_customer_a = database_fetch_field("
			SELECT count(DispatchID) FROM Dispatch INNER JOIN Client on Dispatch.ClientID = Client.ClientID WHERE Client.CustID = $customer_a AND FacilityID = $the_facility ");

		if ($count_facility_for_customer_a != 1)
			{
			//echo "Returning false - " . $count_facility_for_customer_a;
			return false; //This doesn't seem like a movable dispatch... the facilities don't match up and it's an often-used facility
				//However, here I could Copy the facility for this Customer AND then point it to the new Facility
				//
			}
		else
			{
			database_query("UPDATE Facility SET CustID = $newCustID WHERE FacilityID = $the_facility");
			}
		}
		
    //Client:
        //Any other dispatches? yes copy, no move to new customer;
    $clientRS = database_query("Select * from Dispatch where DispatchID <> " . $DispId . " AND ClientID=" . $dispRS->_ClientID);
 
    if ( ! mssql_num_rows($clientRS) )  
		{		 
        //move;
        $clientRS = NULL;
        database_query( "UPDATE Client SET CustID=" . $newCustID . " WHERE ClientID=" . $dispRS->_ClientID);
        $lngNewCliID = 0;//keep old client id
    	}  
	else  
		{  //copy;
        $clientRS = new ActionRecord("Client", "SELECT", "ClientID"); 
        $clientRS->find($dispRS->_ClientID);
        $workRS = new ActionRecord("Client", "INSERT", "ClientID");
        $workRS->filter(array(array("ClientFName", "=", $clientRS->_ClientFName), array("ClientLName", "=", $clientRS->_ClientLName), array("CustID", "=", $newCustID)));
		
        if ( ! $workRS->numRows() ) 
			{           	// $workRS.AddNew;
            $workRS->_CustID = $newCustID;
            $workRS->_MedicalNo = $clientRS->_MedicalNo;
            $workRS->_ClientFName = $clientRS->_ClientFName;
            $workRS->_ClientLName = $clientRS->_ClientLName;
            $workRS->_BudgetNo = $clientRS->_BudgetNo;
            $workRS->_Language = $clientRS->_Language;
            $lngNewCliID = $workRS->_ClientID;
            $workRS->update();
    	    }
		 else
		 	{ 
            $lngNewCliID = $workRS->_ClientID;
			}
        
        $workRS = NULL;
		}
    //Dispatch;
        //Link to new client if needed, What about assigned interpreter;
   // $dispRS.Edit;
    if ( $lngNewCliID > 0 )
        $dispRS->_ClientID = $lngNewCliID;
    
    if ( is_null($dispRS->_Ended) ) 
		{ //! completed 
        if ( ! is_null($dispRS->_InterpID) ) 
            if ( ! $keepAssignment) 
                $dispRS->_InterpID = Null;
    	}
	 else 
		{
        //Completed?;
        //InvHdr;
            //if ( completed change custID;            ;
    	}
    	
    $dispRS->update();
    //Invoice;
    //Move all items with match in master list. Notify operator and delete items not in master list.;
    
	$InvRS = database_query("SELECT CustItems.InvItemID, Invoice.InvRecID, Invoice.InvHdrID, Invoice.CustItemID, Invoice.DispatchID, CustItems.Cost FROM Invoice INNER JOIN CustItems ON Invoice.CustItemID = CustItems.CustItemID WHERE DispatchID = " . $DispId);
	$invoiceRow = mssql_fetch_assoc($InvRS);
	
    if ( ! mssql_num_rows($InvRS) ) 
		{
        if ( ! is_null($InvRS['InvHdrID']) ) 
			{
            //Was an invoice posted?;
              $workRS = database_fetch_row("Select * From InvHdr WHERE InvHdrId=" . $InvRS['InvHdrID']);
            if ( ! is_null($workRS->Posted) ) 
				{
                if ( $reinvoice )				 
                    $bolReInvoice = true;
                 else 
                    $bolReInvoice = false;
				}
           
            $workRS = NULL;
            //Do we have more than one dispatch on this invhdr;
              $workRS = database_query("SELECT Invoice.InvHdrID, Count(Invoice.InvHdrID) AS CountOfInvHdrID FROM Invoice GROUP BY Invoice.InvHdrID HAVING (Invoice.InvHdrID) =" . $InvRS['InvHdrID']);
            if ( $workRS->_CountOfInvHdrID > 1 ) 
				{
                if ( database_fetch_field("SELECT BillMulti FROM Customer CustID=" . $newCustID) ) 
					{
                    //add to existing record if new customer is multi billing;
                    //look for open invhdr record;
                    $InvHdrRs = new ActionRecord("InvHdr", "MULTI",  "InvHdrID");
					$InvHdrRs->filter(array(array('Posted', 'is', 'null'), array('CustID', '=', $newCustID)) );
					
                    if ( $InvHdrRs->EOF() ) 
						{
                        //Create a new record;
                        //$InvHdrRs.AddNew;
                        $InvHdrRs->_CustID = $newCustID;
                        $InvHdrRs->_Created = $dispRS->_Scheduled;
                        $InvHdrRs->_Invoiced = $dispRS->_Scheduled;
                        $InvHdrRs->_Hold = False;
                        $InvHdrRs->_Printed = False;
                        $InvHdrRs->update();
                        
                        $lngInvHdrID = $InvHdrRs->getInsertedKey();
                    	} 
					else 
						{//Add to existing record;
                        $lngInvHdrID = $InvHdrRs->_InvHdrID;
	                    }
                	}
				 else 
					{
                    //Create a new header record;
                    $InvHdrRs = new ActionRecord("InvHdr", "INSERT", "InvHdrID");
                   
                    $InvHdrRs->_CustID = $newCustID;
                    $InvHdrRs->_Created = $dispRS->_Scheduled;
                    $InvHdrRs->_Invoiced = $dispRS->_Scheduled;
                    $InvHdrRs->_Hold = False;
                    $InvHdrRs->_Printed = False;
                    $InvHdrRs->update();

                    $lngInvHdrID = $InvHdrRs->getInsertedKey();
                    $IdentRS = NULL; //close
	                }
         	    }
			else 
				{
                //Keep existing header;
                $InvHdrRs = new ActionRecord("InvHdr", "UPDATE", "InvHdrId");
				$InvHdrRs->find($InvRS->_InvHdrID);
				
               // $InvHdrRs.Edit; implicit
                $InvHdrRs->_CustID = $newCustID;
                if ( $bolReInvoice ) 
                    $InvHdrRs->_Posted = Null;
                 
                $InvHdrRs->update();
                $lngInvHdrID = $InvRS->_InvHdrID;
           		 }
            $workRS = NULL;
            $InvHdrRs = NULL;
        	}
		}
	else
		{
		$lngInvHdrID = $invoiceRow['InvHdrID'];
		if ($lngInvHdrID)
			$lngInvHdrID = "NULL";
		//echo "Skipped big if <BR>";
		var_dump($invoiceRow);	
		}
//echo "invoice header: ";
	// NOwww there should be a result set		
	$InvRS = database_query("SELECT CustItems.InvItemID, Invoice.InvRecID, Invoice.InvHdrID, Invoice.CustItemID, Invoice.DispatchID, CustItems.Cost FROM Invoice INNER JOIN CustItems ON Invoice.CustItemID = CustItems.CustItemID WHERE DispatchID = " . $DispId);
		
	  while ($invoiceRow = mssql_fetch_array($InvRS)) 
	  	{
        if ( is_null($invoiceRow['InvItemID']) ) 
			{
            //Won't find a 0 and will trigger message;
            $lngInvItemID = 0;
			}
		 else 
            $lngInvItemID = $invoiceRow['InvItemID'];
      
	    $workRS = database_query("Select * FROM CustItems WHERE InvItemID=" . $lngInvItemID . " AND CustID=" . $newCustID);
      
	    if ( ! mssql_num_rows($workRS) )
			{
            $response["messages"][] = "Invoice item " . $invoiceRow['CustItemID'] . " was not found in master invoice table.";
            database_query( "Delete from invoice WHERE InvRecID=" . $invoiceRow['InvRecID']);
			} 
		else 
			{
            //$InvRS.Edit;
            //$invoiceRow['CustItemID = 
            //$invoiceRow['InvHdrID = $lngInvHdrID;
			$workRS = mssql_fetch_assoc($workRS);
            database_query("UPDATE Invoice Set InvHdrID = $lngInvHdrID, CustItemID = " . $workRS['CustItemID'] . " WHERE InvRecID = " . $invoiceRow['InvRecID']);
            if ( $invoiceRow['Cost'] <> $workRS['Cost'] ) 
                $response["messages"][] = "Item " . database_fetch_field("SELECT ItemCode FROM CustItems WHERE CustItemID=" . $workRS['CustItemID']) . " prices don't match";
        	}
		 }   //while Inv RS has records left

	$response["success"] = true;    
   return $response; // success
	} //end function


?>