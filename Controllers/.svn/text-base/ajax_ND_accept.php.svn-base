<?PHP
require_once("../includes/alex_functions.php"); 
require_once("../includes/dispatch_functions.php");

 validate_logged_in();
include "../models/ActionRecord.php";

//ini_set("memory_limit","12M");
error_reporting(E_ALL);
set_error_handler ("json_error_fatal", E_ERROR | E_PARSE );

global $sql;
$conn = database_connect(); 

  // 'Validations
  // 1. Boxes are filled
  // 2.  'Length of appointment
  // 3.  'Confirm back dated dispatch
  // </javascript>
  // 4. 'Check for duplicate
  //    Set myDB = CurrentDb()
	
	//input values : medicalNumber
	global $passed;
	global $result; 

	if (isset($_GET['request']))
		$passed = json_decode($_GET['request'], true);

	/* 
	$passed = json_decode('{"medicalNumber":"o","facilityID":"39","businessID":"125","language":"ANAK DARI","clientFirst":"jo","clientLast":"u","scheduledDate":"Mon Mar 21 12:00:00 PDT 2011","scheduledEnd":"Mon Mar 21 14:00:00 PDT 2011","callerPhone":"","callerFirst":"a","callerLast":"e","callerEmail":"","situation":null,"requiresConfirmation":"on","specialInstruction":"","contactPerson":"u","location":"o","txtBatNotes":"","invoiceNotes":"","allowEmergencyRate":false,"isUrgent":"on","customField":[null,null,null,"u",""], "override": {"1": "true"}}', true);
    /* */
	
	$medicalNo  = cleanFieldValue($passed["medicalNumber"], false);
//	die($passed["medicalNumber"]);
	if (!strlen($passed["medicalNumber"]))
		$medicalNo = null;
 	$facilityID = (int)$passed["facilityID"];
	$businessID = (int)$passed["businessID"];
	$customerID = (int)$passed["businessID"]; //yes, a duplicate.
	//$budgetNo = (int)$passed["budgetNo"];

	$language = cleanFieldValue($passed["language"], false);
//	echo "<BR> CLeaning " . $passed["language"] . " vs. " . $language;
 	$clientFirst = cleanFieldValue($passed["clientFirst"], false);
 	$clientLast = cleanFieldValue($passed["clientLast"], false);
 
 				//necessary to strip timezone...
  	$schedDate = toSqlDate(cleanDateValue($passed["scheduledDate"], false));
	$schedEnd = cleanDateValue($passed["scheduledEnd"], false);	
    $callerPhone = cleanFieldValue($passed["callerPhone"], false);
	
	$callerFirst = cleanFieldValue($passed["callerFirst"], false);
	$callerLast = cleanFieldValue($passed["callerLast"], false);
	
	$callerEmail = cleanFieldValue($passed["callerEmail"], false);
    $situation = cleanFieldValue($passed["situation"], false);
	
	$requiresConfirmation = (bool)$passed["requiresConfirmation"];
	$isUrgent = (bool)$passed["isUrgent"];
    $specialInstruction = cleanFieldValue($passed["specialInstruction"], false);
    $contactPerson = cleanFieldValue($passed["contactPerson"], false);
    $location = cleanFieldValue($passed["location"], false);
	//$custComments = cleanFieldValue($passed["custComments"], false);
    $txtBatNotes = cleanFieldValue($passed["txtBatNotes"], false);
	$invoiceNotes = cleanFieldValue($passed["invoiceNotes"], false);
    $addEmergencyRate = cleanFieldValue($passed["allowEmergencyRate"], false);
	$tmp = $passed["customField"];
	
	if ($facilityID == 0)
		json_error("Invalid facility id");
	
	$lat = database_fetch_field("SELECT latitude from Facility WHERE FacilityID = $facilityID");

	if (!$lat)
		{
		$sql = "SELECT Zipcodes.Latitude, Zipcodes.Longitude FROM Zipcodes INNER JOIN Facility ON Zipcodes.ZIPCode = Facility.Zip WHERE FacilityID = $facilityID";
//		echo $sql;
		$row = database_fetch_row($sql);
		if (! ($row['Latitude']))
			die("Cannot determine latitude/longitude location of appointment.");
		database_query("UPDATE Facility SET Latitude = '" . $row['Latitude'] . "' , Longitude = '" . $row['Longitude'] . "' WHERE facilityID = $facilityID");
		}
		
	if (is_array($passed["customField"])) //clean custom fields
	  foreach ($tmp as $key => $v)	
			$customField[$key] = cleanFieldValue($v	, false);
		
   ////////////////////
	
    if (($medicalNo == null ) || ($medicalNo === 0) || ($medicalNo == '0'))
        $strWhere = "Client.CustId="  . $businessID . " AND Language='" . $language . "' AND ClientFName='" . $clientFirst . "' AND ClientLName='" . $clientLast ."' AND (MedicalNo IS NULL OR MedicalNo = '0')";
    else
        $strWhere = "Client.CustId="  . $businessID . " AND Language='" . $language . "' AND ClientFName='" . $clientFirst . "' AND ClientLName='" . $clientLast . "' AND MedicalNo = '" . $medicalNo . "'"; //null if empty

   ////////////////////
   // see if this client already exists   
   
	$queryPart = "SELECT Client.ClientID,Client.CustID, Client.ClientFName, Client.ClientLName, Client.Language, Dispatch.Scheduled, Dispatch.DispatchID, Dispatch.custcanceled FROM Client LEFT JOIN Dispatch ON Client.ClientID = Dispatch.ClientID WHERE ";
    $LookRS = database_query($queryPart . $strWhere, 0);

    $isNewClient = true;
	
    if (mssql_num_rows($LookRS) == 0) // No exact matches, let's check for a similar match.
		{
	    if ($matchClient = checkDuplicateClient($language, $clientFirst, $clientLast, $medicalNo, $customerID))
			if (requestOverride("This client looks suspiciously similar to " . $matchClient['ClientFName'] . ' ' .  $matchClient['ClientLName'] . ' MR#:' .  $matchClient['MedicalNo'] . ". Are they the same client?", 6))
				{
				$isNewClient = false;
				$lngClientID = 	$matchClient["ClientID"];
				}				
		}
	else
		{
		$isNewClient = false;
		$row = mssql_fetch_assoc($LookRS);		
		$lngClientID = $row['ClientID'];
		//echo "already found: $lngClientID";
		}
	
	if ($isNewClient)
		;
    else
		{ //Yes the client does.
		$filteredQuery = $queryPart . $strWhere . " AND Scheduled='" . toSqlDate($schedDate) . "' and CustCanceled is null";
        $FilteredRS = database_query($filteredQuery);
		//makeshift alternative to recordset filtering.
		$isNewDispatch = false; 
		
        if (mssql_num_rows($FilteredRS) == 0) // Getting even more specific, is it the same client, time, and not cancelled? 
        	{
        		if ($duplicate = checkDuplicateDispatch($schedDate,  $businessID, $lngClientID))
					if (!requestOverride("This dispatch seems VERY similar, but not identical to #$duplicate. Continue?", 5))
						{
						$result["DispAccept"] = false;
						$result["reason"] = "Cancelled duplicate.";
						echo json_encode($result);
						return; // should die, cleanly	
						}
				$isNewDispatch = true; //No it isn't.
        	}
        else
			{ 
			// Yes, thus it's a duplicate.          			
            if (requestOverride("Duplicate Found. Continue with Team Booking?", 1))
			//will check for a special override variable, otherwise will die requesting override.
				{//'Write to tables and open form
			    $isNewDispatch = true;
				}
            else
                {
				$result["DispAccept"] = false;
				$result["reason"] = "Cancelled duplicate.";
				echo json_encode($result);
				return; // should die, cleanly	
				}
			}
		}

	 if ($isNewClient)
	   	{// 'New client record.

		$rec = new ActionRecord("Client", "NEW", "ClientID" );		
        $rec->_CustId =  $customerID ;
        $rec->_ClientFName =  $clientFirst ;
        $rec->_ClientLName =  $clientLast ;
        $rec->_MedicalNo =  $medicalNo ;
        $rec->_Language =  $language ;
		$rec->update();      
	  
        $lngClientID  = $rec->getInsertedKey() ; 
		//myDB.OpenRecordset("Select @@Identity as CliID FROM Client")

        $isNewDispatch = true;
		}
    else
		{
		//echo "NOT NEW CLIENT";
        //code moved. Already set above... 4/12/2011 ; //$lngClientID = ...
		}
   	
	if ($isNewDispatch )
		{//'New dispatch record
        $strCaller = $callerFirst . " " . $callerLast;
        if (strlen($callerEmail) == 0 )
            $strEMail = " " ;
        else
            $strEMail = $callerEmail;

        $TempRS = new ActionRecord("Dispatch", "NEW", "DispatchID"); 

        $TempRS->_ClientID = $lngClientID;
        $TempRS->_Scheduled = $schedDate;
        $TempRS->_SchedEnd = $schedEnd;
        $TempRS->_RecievedBy = CurrentUser();
        $TempRS->_Recieved = substr(date("c"),0,19);;
        $TempRS->_Caller = $strCaller ;
        $TempRS->_CallerEMail = $strEMail ;
		//$TempRS->_BudgetNo = $budgetNo;
		
        if ( strlen($callerPhone) ) 
            $TempRS->_callerPhone = $callerPhone;

        if ( strlen($situation) )
	        $TempRS->_SituID = $situation;

        $TempRS->_FacilityID = $facilityID;
		
        if (($requiresConfirmation)) //counter-intuitive, but correct
            $TempRS->_CustConfirmed = $requiresConfirmation;
		
        $TempRS->_Urgent = $isUrgent;
        $TempRS->_SpecialInstruction = $specialInstruction;
        $TempRS->_ContactPerson = $contactPerson;
        $TempRS->_Location = $location;
        $TempRS->_Comments = $txtBatNotes;
		
        $FacRS = database_query("Select Latitude,Longitude FROM Facility WHERE FacilityID=" . (int) $facilityID);
		
        if (!mssql_num_rows($FacRS)) 
			{
            $result['messages'][] = "Latitude or Longitude not found for this facility.";
			}
        else
			{
			$FacRS = mssql_fetch_object($FacRS);
            $TempRS->_Longitude = $FacRS->Longitude;
            $TempRS->_Latitude = $FacRS->Latitude;
			}
		
        $TempRS->_InvoiceNotes = $invoiceNotes;
        $TempRS->_Billable = true;
        $TempRS->_Payable = true;
		 
        $TempRS->update(); 
        $lngDispID = $TempRS->getInsertedKey(); 
		
        for ($x =1; (isset($customField[$x]) && (trim($customField[$x]) != "")) || ($x <= 4); $x++  )
        	if (isset($customField[$x]))
        	  	{
	        	$sql = "INSERT Into CustAuxValues (CustFieldID, AuxRelatedID, AuxRelatedValue) SELECT FieldID, " . $lngDispID .  " as Disp, '" . $customField[$x] . "' as AuxValue FROM CustomerFields WHERE custID = " . $customerID .  " and FieldOrder = " . $x;
				database_query($sql);
        		}
        	 
		//'Create new default invoice items
        $TempRecordset = database_query("Select * FROM CustItems WHERE [CustID]=" . $businessID . " and [JobType]='I' and [Default]=1 and [Active]=1");
		//echo "232: Found " . mssql_num_rows($TempRecordset) .  " cust items";
		
        while ($TempRS = mssql_fetch_object($TempRecordset))
			{
			addLineItemToDispatch($lngDispID, $TempRS->CustItemID);
				/*
            $InvRS = new ActionRecord("Invoice", "NEW", "InvRecID");
            $InvRS->_DispatchID = $lngDispID;
            $InvRS->_CustItemID = $TempRS->CustItemID;
            $InvRS->_Unit = $TempRS->Unit;
            $InvRS->_Min = $TempRS->Min;
            $InvRS->_PayUnit = $TempRS->PayUnit;
            $InvRS->_PayMin = $TempRS->PayMin;
			$dblLength = (strtotime($schedEnd) - strtotime($schedDate)) / 60 / 60;
			if ($dblLength < 0)
				{
				$result['DispAccept'] = false;
				$result['reason'] = "Appointment length came out negative somehow";
				die(json_encode($result));
				}
				
            if ($TempRS->Hourly) 
				{  // 'Round up to nearest unit
                $lngTemp = $dblLength / $TempRS->Unit;
                if ($lngTemp != (int)($dblLength / $TempRS->Unit))
                    $lngTemp++;

                $InvRS->_Quantity = $lngTemp * $TempRS->Unit;
				
                //'Round payable up to nearest unit
                $lngTemp = $dblLength / $TempRS->PayUnit;
                if ($lngTemp != ($dblLength / $TempRS->PayUnit))
                    $lngTemp = $lngTemp + 1;
				
                $InvRS->_PayQty = $lngTemp * $TempRS->PayUnit;
				}
            else
				{
                $InvRS->_Quantity = $TempRS->Min  ;
                $InvRS->_PayQty = $TempRS->PayMin ;
				}
 
            $InvRS->_Cost = $TempRS->Cost;
            $InvRS->_InterpRate = $TempRS->Pay;
            $InvRS->update(0); 
			*/
			}
//        TempRS.Close
        //'Check for Emergency
        $TempRS = database_query("SELECT Customer.EmergencyHours, CustItems.CustItemID, CustItems.Unit, CustItems.Min, CustItems.PayUnit, CustItems.PayMin, CustItems.Cost, CustItems.Pay, CustItems.CustID FROM Customer INNER JOIN CustItems ON Customer.EmergencyItemID = CustItems.CustItemID WHERE [Active]=1 and CustItems.CustID=" . (int)$businessID);
		
        if (mssql_num_rows($TempRS) ) 
			{
			$TempRS = mssql_fetch_object($TempRS);
            //' Determine Zipcode for appointment
			//$notice_period -= 0; //timezoneDifference($strZip);
			//echo "notice period: $notice_period Vs " . $TempRS->EmergencyHours ;
			$isEmergencyRate = false;
			
			if (hoursTilDispatch($lngDispID)  <= $TempRS->EmergencyHours )
				{
				if ($addEmergencyRate)
					{
					$isEmergencyRate = true;//echo "<br>292: Adding emergency rate. ID = " . $TempRS->CustItemID;;
					addLineItemToDispatch($lngDispID, $TempRS->CustItemID);
					
					}
				}
		
			}
 
	
    //'Display all records if necessary
	/* If (Forms!Dispatch!grpView = 1) And ($schedDay < Forms!Dispatch!txtCutOff) Then
       Forms!Dispatch!grpView = 2
       Forms!Dispatch.DispByAptSub.Form.RecordSource = "SELECT Dispatch.ClientID, Dispatch.Scheduled, Dispatch.Ongoing, Dispatch.RecievedBy, Dispatch.Recieved, Dispatch.Caller, Dispatch.$callerPhone, Dispatch.InterpID, Dispatch.DispatchID, Dispatch.InterpConfirmed, Dispatch.CustCanceled, Dispatch.Started, Dispatch.SituID, Client.CustID, Client.MedicalNo, Client.ClientFName, Client.ClientLName, Dispatch.Contactperson, Dispatch.FacilityID, Dispatch.SpecialInstruction, Dispatch.ControlNo, Client.BudgetNo, Client.Language, Dispatch.Location, Dispatch.SchedEnd, Dispatch.Ended, Dispatch.CustConfirmed, Dispatch.Urgent, Dispatch.Comments, Dispatch.CallerEMail,Dispatch.latitude, dispatch.longitude FROM Dispatch INNER JOIN Client ON Dispatch.ClientID=Client.ClientID;"
    End If
    Set CloneRS = Forms!Dispatch.RecordsetClone
    CloneRS.FindFirst "CustID=" & $customerID
    Forms!Dispatch.Bookmark = CloneRS.Bookmark
    CloneRS.Close
    Set CloneRS = Forms!Dispatch.DispByAptSub.Form.RecordsetClone
    CloneRS.FindFirst "ClientID=" & lngClientID
    If Not CloneRS.NoMatch Then
        Forms!Dispatch.DispByAptSub.Form.Bookmark = CloneRS.Bookmark
    End If
    CloneRS.Close
    myDB.Close	*/
	require_once("../../Classes/DispatchHistory.php");
	
	$hist = new DispatchHistory();
	$details = array();
	$details['DispatchID'] = $lngDispID;
	$details['ActionID'] = 23; //made up an ID for New Dispatch
	$details['HistNotes'] = "Dispatch Created [Web Dispatcher]. ";
	$details['StaffID'] = $_SESSION['login']['loginID'];
	$hist->create($details);
	

	$result["DispAccept"] = true;
	echo json_encode($result); //parameters DispAccept, Messages [], ???
	}
		
	return;

////////////////////////////////////////////////////////////////////////////////////////////////	
	 	
function requestOverride($message, $id)
//this functions serves as a means to communicate with the user through PHP. It terminates the script
// and returns the inquiry on the first run through. The script is then re-run by the client with a response
// message.
{
	global $passed;
	
	if (isset($passed["override"]))
		if (isset($passed["override"][$id]))
			return $passed["override"][$id]; //Is there a response message (either affirmative (true) or negative) ?
						
	//Else this is the first run through, so pass the required question to the user.
	$result["requests"][$id] = $message;	

	die(json_encode($result) ); //client-side javascript will get a 'confirm' box respond to this.
}
    
////////////////////////////////////////////////////////////////////////////////////////////////////////
// looks for a client that is similar to the described one to try to find typos (should only be used AFTER an exact search)	
function checkDuplicateClient($language, $clientF, $clientL, $medicalNo, $CustID)
{
	$queryPart  = "SELECT * FROM Client WHERE ";
	$queryPart .= " Client.CustID = $CustID AND Client.Language = '$language' ";	
	
 	$LookRS = database_query($queryPart); 
	
	while ($row = mssql_fetch_assoc($LookRS))
		{
			//var_dump($row);
			$score = 0; //1 point for similarity
			
			//echo "<BR>$score";
			
			if (strlen($medicalNo))
				{
				if ($medicalNo == $row["MedicalNo"])
					$score += min(array(3, strlen($medicalNo)));
				else
					$score += 2 - levenshtein($medicalNo, $row["MedicalNo"]);
				} 
				
			$maxDist = 4 + $score;
			
			if (abs(strlen($row["ClientFName"]) - strlen($clientF)) + abs(strlen($row["ClientLName"]) - strlen($clientL)) <= $maxDist)
				{ // quickly filter out ones that can't possibly be close enough
					$dist = levenshtein($clientF, $row["ClientFName"]);
					if ($dist + abs(strlen($row["ClientLName"]) - strlen($clientL)) <= $maxDist)
						$dist += levenshtein($clientL, $row["ClientLName"]);
					else
						$dist = $maxDist + 1; //no match
				}
			else
				$dist = $maxDist + 1; // no match
			
			$score = $maxDist - $dist;
												
			if ($score > 0) //having two things similar is enough reason
				return $row;
		}	
	return false;
	
}

////////////////////////////////////////////////////////////////////////////////////////////////
	
function checkDuplicateDispatch($schedDate,  $CustID, $ClientID)
{
	$schedDate = toSqlDate($schedDate);
	$queryPart = "SELECT DispatchID as C FROM Client INNER JOIN Dispatch ON Client.ClientID = Dispatch.ClientID WHERE ";
	$queryPart .= " DateDiff(hour, '$schedDate' , Scheduled) <= 1 AND DateDiff(hour, '$schedDate', Scheduled) >= -1  AND  CustCanceled is null  ";
	$queryPart .= " AND Client.CustID = $CustID AND Client.ClientID = $ClientID";
	
    return database_fetch_field($queryPart);
}
	
//////////////////////////////////////////////////////////////////////////////////////////////

function addLineItemToDispatch($lngDispID, $item) //second parameter is a custItemID
{
	$item = (int)$item; $lngDispID = (int)$lngDispID; //to reduce sql injection.
	
	if (database_fetch_field("SELECT CustID From Dispatch inner join Client on Client.ClientID = Dispatch.ClientID  where DispatchID = $lngDispID") != database_fetch_field("SELECT CustID from CustItems where CustItemID = $item"))
			handleError("Tried to add a line item that doesn't apply to this customer.");

	$TempRS = database_fetch_row("SELECT * from CustItems where [Active] = 1 and CustItemID = $item");
	
                    $InvRS = new ActionRecord("Invoice", "NEW", "InvRecID");
                    $InvRS->_DispatchID = $lngDispID;
                    $InvRS->_CustItemID = $TempRS['CustItemID'];
                    $InvRS->_Unit = $TempRS['Unit'];
                    $InvRS->_Min = $TempRS['Min'];
                    $InvRS->_PayUnit = $TempRS['PayUnit'];
                    $InvRS->_PayMin = $TempRS['PayMin'];
                    $InvRS->_Quantity = $TempRS['Min'];
                    $InvRS->_PayQty = $TempRS['PayMin'];
                    $InvRS->_Cost = $TempRS['Cost'];
                    $InvRS->_InterpRate = $TempRS['Pay'];
					
			$schedEnd = database_fetch_field("SELECT SchedEnd from Dispatch where DispatchID = $lngDispID");
			$schedDate = database_fetch_field("SELECT Scheduled from Dispatch where DispatchID = $lngDispID");
			$dblLength = (strtotime($schedEnd) - strtotime($schedDate)) / 60 / 60;




            if ($TempRS['Hourly']) 
				{  // 'Round up to nearest unit			
				if ($dblLength < 0)
					{
					$result['DispAccept'] = false;
					$result['reason'] = "Appointment length came out negative somehow";
					handleError($result);
					}
				
                $lngTemp = $dblLength / $TempRS['Unit'];
                if ($lngTemp != (int)($dblLength / $TempRS['Unit']))
                    $lngTemp++;

                $InvRS->_Quantity = $lngTemp * $TempRS['Unit'];
				
                //'Round payable up to nearest unit
                $lngTemp = $dblLength / $TempRS['PayUnit'];
                if ($lngTemp != ($dblLength / $TempRS['PayUnit']))
                    $lngTemp = $lngTemp + 1;
				
                $InvRS->_PayQty = $lngTemp * $TempRS['PayUnit'];
				}
            else
				{
                $InvRS->_Quantity = $TempRS['Min']  ;
                $InvRS->_PayQty = $TempRS['PayMin'] ;
				}
 
			$InvRS->update();
}

//////////////////////////////////////////////////////////////////////////////////////////////

function handleError($str)
{
	echo json_encode($str);
	die();
}
?>
	
    