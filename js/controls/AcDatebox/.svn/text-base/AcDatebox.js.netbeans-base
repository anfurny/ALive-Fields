/* 
* Javascript set of classes to extend standard HTML controls to make them ajax, powered
* and connect them to a database in a way that mirrors access.
* Requires jquery, Requires json2 (https://github.com/douglascrockford/JSON-js/blob/master/json2.js)
*/

// To do:
// lockable

// includes

//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////

/**
* @class AcDatebox A basic control for loading/saving fields that can be represented as dates. For date-times, see AcDateTimeSet. Is initialized with an &lt;input&gt; tag. 
* @extends AcField  
* @requires AcControls.js and its dependencies.
* @requires jQueryUI 
* @requires jQueryUI datepicker
* @see AcDateTimeSet
*/

AcDatebox = function (field,table,pkey,loadable,savable,dependentFields)
{
 AcTextbox.call(this, field,table,pkey,loadable,savable,dependentFields); //call parent constructor
}

AcDatebox.prototype = new AcTextbox();  // Here's where the inheritance occurs
AcDatebox.prototype.constructor=AcDatebox; 
AcDatebox.prototype.parent = AcTextbox.prototype;


AcDatebox.prototype.initialize = function(nada) //paramater only exists to be passed on
{
  this.correspondingElement = [];
  AcTextbox.prototype.initialize.apply (this,  arguments); //call parent constructor 
  nada.addClass("acDate"); //enables jquery ui date-picker to theme this

  this.getElement().keydown(this, function (param) { return param.data.handleKeydown(param);} ) ; 
//  this.getElement().blur(this, function (param) {  /*  DO NOT NOT NOT -- locks control somehow ! return param.data.validate();  */ } ) ; 
  //call the parent constructor first... it's okay that it will be called twice
  nada.datepicker();
//  nada.datepicker("hide");
  //this.setValue(new Date());	
}

/////////////////////////////////////////////////////////////////////////////////////

AcDatebox.prototype.validate = function()
{
	this.setValue(this.getValue()); //this actually does validate the field.
}

////////////////////////////////////////////////////////////////////////////////////

AcDatebox.prototype.setValue = function (param)
{
	$(this.correspondingElement.selector).datepicker("setDate", param); 
	return;
	if (typeof param == "string")
		param = strToDate(param);	
	else if (param instanceof Date)
		;
	else if (! param)
		param = new Date();
	else
		handleError("Tried to set datebox to unknown value: " + param);
		
//	if (param.getYear() < 1950)
	//	param.setYear(param.getYear() + 100); //translate dates ending with /05 from 1905 to 2005

	result = param.getYear() % 100;
	if (result.length < 2)
		result = "0" + result;
	result = param.getDate() + "/" + result;	
	if (result.length < 5)
		result = "0" + result;
	result = (param.getMonth()+1) + "/" + result;
	if (result.length < 8)
		result = "0" + result;

	this.correspondingElement[0].value = result;
}

//////////////////////////////////////////////////////////////////////////////

AcDatebox.prototype.lock = function ()
{
	this.correspondingElement.datepicker( "disable" );
	this.correspondingElement[0].readOnly = true;
}

AcDatebox.prototype.unlock = function ()
{
	this.correspondingElement.datepicker( "enable" );
	this.correspondingElement[0].readOnly = false;
}